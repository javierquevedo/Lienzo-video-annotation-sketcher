<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	   creationComplete="onCreationComplete()" backgroundAlpha="0" backgroundColor="red" borderStyle="solid"
	    horizontalScrollPolicy="off" verticalScrollPolicy="off">
	<mx:Metadata>
	    [Event( name="drawComplete", type="net.ximpel.events.DrawEvent") ]
   	</mx:Metadata>
	 <mx:Script>
	 	<![CDATA[
			import mx.controls.Image;
			import mx.controls.TextArea;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.styles.StyleManager;
			
			import net.ximpel.classes.Constants;
			import net.ximpel.events.AnnotationEvent;
			import net.ximpel.events.DrawEvent;
	 		
	 		public var editable : Boolean = false;
	 			 		
	 		[Bindable]
	 		public var tool : String = Constants.ERASERTOOL;
	 		[Bindable]
	 		public var thickness : Number = 1.0;
	 		[Bindable]
	 		public var lineColor : Number = 1.0;
	 		[Bindable]
	 		public var lineAlpha : Number = 1.0;
	 		
			[Bindable] public var text : String = "";
			[Bindable] public var fontFamily : String = "Verdana";
			[Bindable] public var fontSize : Number = 42;
			[Bindable] public var fontWeight : Boolean = false;
			[Bindable] public var textDecoration : Boolean = false;
			[Bindable] public var fontStyle : Boolean = false;
			[Bindable] public var fontColor : Number = 1.0;

			//public var frameImage:Image = new Image();

			
			private var iStyleManager2: IStyleManager2;	 		
	 		private var startX : Number;
	 		private var startY : Number;
	 		private var sampleTextArea : TextArea = new TextArea(); 
	 		
	 		public function clear():void{

	 			graphics.clear();
	 			this.removeAllChildren();
	 			this.setGraphicsStyle();
	 		}
	 		
	 		private function setGraphicsStyle():void{
	 			graphics.lineStyle(thickness, 1,1);
	 		}
	 		
	 		private function onCreationComplete():void{
   	 			graphics.clear();
        		this.setGraphicsStyle();
        		//updateLabel();
				iStyleManager2 = StyleManager.getStyleManager(this.moduleFactory);
				sampleTextArea.styleName="labelStyle";
        		//IStyleManager2.getStyleDeclarations([]);
				iStyleManager2.getStyleDeclaration(".labelStyle").setStyle("borderStyle","none");
				iStyleManager2.getStyleDeclaration(".labelStyle").setStyle("backgroundAlpha",0);
				sampleTextArea.editable=false;
            	sampleTextArea.selectable=false;
            	sampleTextArea.editable=false;
            	sampleTextArea.width=this.width;
            	sampleTextArea.height=this.height;
            	sampleTextArea.horizontalScrollPolicy="off";
            	sampleTextArea.verticalScrollPolicy="off";
            	

        		this.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMoveForText);
	 			this.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
	 			this.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
	 			this.addEventListener(MouseEvent.CLICK, onMouseClick);
	 			this.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
				this.addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);
	 		}
	 		
	 		private function onMouseClick(event:MouseEvent):void{
	 			
	 		}
	 		
	 		private function onMouseDown(event:MouseEvent):void{
	 			//this.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
	 			if (editable == false)
	 				return;
		 		this.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
	 			startX = mouseX;
	 			startY = mouseY;
                graphics.moveTo(mouseX, mouseY);
                 this.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
                  }
                  
         	private function onMouseUp(event:MouseEvent):void
                  {
                         this.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);					
	                     dispatchEvent(new DrawEvent(DrawEvent.DRAW_COMPLETE));
	                     if (tool == Constants.TEXTOOL)
	                     	this.addChild(sampleTextArea);

                  }
          	private function onMouseMove(event:MouseEvent):void{

          			switch (tool){
         				case Constants.SQUARETOOL:
         				    graphics.clear();
		          			graphics.lineStyle(thickness, lineColor , lineAlpha);
	          				graphics.drawRect(startX, startY, mouseX-startX, mouseY-startY);
	          				break;
         				case Constants.CIRCLETOOL:
         				    graphics.clear();
		          			graphics.lineStyle(thickness, lineColor , lineAlpha);
	          				graphics.drawCircle(startX+((mouseX-startX)/2), startY+((mouseY-startY)/2),
	          							Math.sqrt(
	          									Math.pow((mouseX-startX),2)+
	          									Math.pow((mouseY-startY),2)
	          									)/2);
	          				break;
         				case Constants.PENTOOL:
		          			graphics.lineStyle(thickness, lineColor , lineAlpha);
							graphics.lineTo(mouseX, mouseY);
	          				break;
	          			case Constants.LINETOOL:
	          				graphics.clear();
		          			graphics.lineStyle(thickness, lineColor , lineAlpha, false, "normal", null, "round");

	          				graphics.moveTo(startX,startY);
	          				graphics.lineTo(mouseX,mouseY);
	          				//graphics.moveTo(startX,startY);
							break;
						case Constants.ERASERTOOL:
							//graphics.clear();
							graphics.lineStyle(10, 0xFFFFFF , 1.0, false, "normal", null, "round");
							graphics.lineTo(mouseX,mouseY);

						default:
							break;
          			}
            	}
            	
            	private function onMouseMoveForText(event:Event):void{
            		//CursorManager.setBusyCursor();
            		if (tool == Constants.TEXTOOL){
            			if (sampleTextArea.parent == null)
            				this.addChild(sampleTextArea);
            			sampleTextArea.visible=true;
            			sampleTextArea.x = mouseX;
            			sampleTextArea.y=mouseY;
            		}
            		else{
            			sampleTextArea.visible = false;
            			
            		}
            	}
       	            
       	        private function onMouseOut(event:Event):void{
       	        	sampleTextArea.visible=false;
       	        }   
				private function onMouseOver(event:Event):void{
					sampleTextArea.visible=true;
				}	   
       	           
				public function updateFontWeight():void{
					if (fontWeight == true)
						iStyleManager2.getStyleDeclaration(".labelStyle").setStyle("fontWeight","bold");
					else
						iStyleManager2.getStyleDeclaration(".labelStyle").setStyle("fontWeight","normal");
				}
			
				public function updateTextDecoration():void{
					if (textDecoration == true)
						iStyleManager2.getStyleDeclaration(".labelStyle").setStyle("textDecoration","underline");
					else          					
						iStyleManager2.getStyleDeclaration(".labelStyle").setStyle("textDecoration","none");	
				}
			
				public function updateFontFamily():void{
						iStyleManager2.getStyleDeclaration(".labelStyle").setStyle("fontFamily",fontFamily);
				}
			
				public function updateTextSizeLabel():void{
					//iStyleManager2 = StyleManager.getStyleManager(this.moduleFactory);
					//fontSize = size;
					iStyleManager2.getStyleDeclaration(".labelStyle").setStyle("fontSize",fontSize);
				}
			
				public function updateFontStyle():void{
					//iStyleManager2 = StyleManager.getStyleManager(this.moduleFactory);
					if (fontStyle == true)
						iStyleManager2.getStyleDeclaration(".labelStyle").setStyle("fontStyle","italic");
					else
						iStyleManager2.getStyleDeclaration(".labelStyle").setStyle("fontStyle","normal");
				}
			
            	public function updateLabel():void{
						//iStyleManager2 = StyleManager.getStyleManager(this.moduleFactory);
						iStyleManager2.getStyleDeclaration(".labelStyle").setStyle("fontSize",fontSize);
						iStyleManager2.getStyleDeclaration(".labelStyle").setStyle("color",fontColor);
						iStyleManager2.getStyleDeclaration(".labelStyle").setStyle("fontFamily",fontFamily);
          				if (fontWeight == true)
							iStyleManager2.getStyleDeclaration(".labelStyle").setStyle("fontWeight","bold");
          				else
							iStyleManager2.getStyleDeclaration(".labelStyle").setStyle("fontWeight","normal");
          				
          				if (textDecoration == true)
							iStyleManager2.getStyleDeclaration(".labelStyle").setStyle("textDecoration","underline");
          				else          					
							iStyleManager2.getStyleDeclaration(".labelStyle").setStyle("textDecoration","none");
          				
          				if (fontStyle == true)
							iStyleManager2.getStyleDeclaration(".labelStyle").setStyle("fontStyle","italic");
          				else
							iStyleManager2.getStyleDeclaration(".labelStyle").setStyle("fontStyle","normal");
            	}
            	
          	
	 	]]>
	 </mx:Script>
	 <mx:Binding source="text" destination="sampleTextArea.text" />
</mx:Canvas>
